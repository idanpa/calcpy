In [1]: 12
Out[1]: 12            0x0c             0000 1100
In [1]: 30/3deg
Out[1]: 
1800                   
---- ≈ 572.957795130823
 pi                    
In [1]: [pi/2, log(x)/sin(y), Sum(1/n**2,(n,1,4))]
Out[1]: 
               4                                                     
             ____                                                    
             \   `                                                   
              \    1                        log(x)                   
 pi  log(x)    \   --  ≈ [1.57079632679490, ------, 1.42361111111111]
[--, ------,   /    2]                      sin(y)                   
 2   sin(y)   /    n                                                 
             /___,                                                   
             n = 1                                                   
In [1]: SymmetricGroup(3).conjugacy_classes()
Out[1]: [{()}, {(0 1 2), (0 2 1)}, {(0 2), (1 2), (0 1)}]
In [1]: latex(diff($\frac{1}{x}$ * $\sin{x}$))
Out[1]: \frac{\cos{\left(x \right)}}{x} - \frac{\sin{\left(x \right)}}{x^{2}}
In [1]: 8x**2+2x-10 = 0
Out[1]: [-5/4, 1] ≈ [-1.25000000000000, 1]
In [1]: 23232?
Out[1]: 23232         0x5ac0           0101 1010 1100 0000

  2  6  1
11 *2 *3        {2: 6, 3: 1, 11: 2} = factorint(_)
In [1]: ((1,2),(2,3))?
Out[1]: 
[1  2]
[    ]
[2  3]

-1 = det(_)
4 = trace(_)

[-3  2 ]
[      ]
[2   -1] = _**-1

      2               
lambda  - 4*lambda - 1 = _.charpoly().as_expr()

                 [    ___    ]                    [        ___]   
                 [  \/ 5    1]                    [  1   \/ 5 ]   
        ___      [- ----- - -]           ___      [- - + -----]   
[(2 - \/ 5 , 1, [[    2     2]]), (2 + \/ 5 , 1, [[  2     2  ]])]
                 [           ]                    [           ]   
                 [     1     ]                    [     1     ]    = _.eigenvects() # ((eval, mult, evec),...

 [    ___              ___]                         
 [  \/ 5    1    1   \/ 5 ]  [      ___           ] 
 [- ----- - -  - - + -----]  [2 - \/ 5       0    ] 
([    2     2    2     2  ], [                    ])
 [                        ]  [                 ___] 
 [     1            1     ]  [    0      2 + \/ 5 ]  = _.diagonalize() # (P,D) so _=PDP^-1
In [1]: e**(-x**2)?
Out[1]: 
   2
 -x 
e   

        2
      -x 
-2*x*e    = diff(_)

  ____       
\/ pi *erf(x)
-------------
      2       = integrate(_)

          4        
     2   x     / 6\
1 - x  + -- + O\x /
         2          = series(_)

[] = solve(_)
In [1]: np.arange(4)
Out[1]: 
[0]
[ ]
[1]
[ ]
[2]
[ ]
[3]
In [1]: np.zeros((2,2))
Out[1]: 
[0.0  0.0]
[        ]
[0.0  0.0]
In [1]: np.array([[alpha, gamma, x_1]])
Out[1]: [alpha  gamma  x_1]
